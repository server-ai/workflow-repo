permissions:
  id-token: write
  contents: write  # Ensure write permission for contents

name: CodeGuru Analysis and Upload Results

on:
  workflow_dispatch:

jobs:
  codeguru:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write  # Ensure write permission for contents

    steps:
      # Step 1: Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials for CodeGuru
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Trigger CodeGuru Reviewer to analyze the repository
      - name: Trigger CodeGuru Review
        run: |
          aws codeguru-reviewer create-code-review \
            --name CodeGuru_file_analysis_${{ github.sha }} \
            --repository-association-arn arn:aws:codeguru-reviewer:us-east-1:008971672094:association:59eb03ee-9a68-4478-9ea1-e22770a1fba6 \
            --type '{"RepositoryAnalysis": {"RepositoryHead": {"BranchName": "master"}}}' \
            --region us-east-1

      # Step 4: Wait for CodeGuru Review to Complete
      - name: Wait for CodeGuru Review to Complete
        run: |
          echo "Waiting for CodeGuru review to complete..."
          sleep 190

      # Step 5: Get the Most Recent CodeGuru Review ARN Using grep
      - name: Get the Most Recent CodeGuru Review ARN
        id: get_arn
        run: |
          echo "Fetching CodeGuru Review ARN..."
          # Fetch all reviews for debugging
          aws codeguru-reviewer list-code-reviews \
            --type RepositoryAnalysis \
            --output json > codeguru_review_list.json

          # Display the full list for debugging
          echo "Full list of reviews: $(cat codeguru_review_list.json)"

          # Extract the ARN of the most recent completed review using grep
          REVIEW_ARN=$(grep -oP '"CodeReviewArn": *"\K[^"]+' codeguru_review_list.json | head -n 1)

          echo "REVIEW_ARN found: $REVIEW_ARN"
          
          if [ -z "$REVIEW_ARN" ]; then
            echo "DEBUG: No completed CodeGuru review found."
            echo "Check if the repository has any reviews completed and confirm the region: us-east-1"
            echo "REVIEW_ARN=NONE" >> $GITHUB_ENV  # Store as NONE
            exit 1  # Exiting with an error
          fi

          echo "REVIEW_ARN=$REVIEW_ARN" >> $GITHUB_ENV

      # Step 6: Fetch the CodeGuru Results
      - name: Fetch CodeGuru Results
        run: |
          if [ "${{ env.REVIEW_ARN }}" == "NONE" ]; then
            echo "No CodeGuru review ARN found in environment variables. Exiting."
            exit 1
          fi

          echo "Fetching recommendations for ARN: ${{ env.REVIEW_ARN }}"
          aws codeguru-reviewer list-recommendations \
            --code-review-arn "${{ env.REVIEW_ARN }}" \
            --output json > codeguru_results.json

      # Step 7: Commit the results back to the GitHub repository
      - name: Commit CodeGuru Results to GitHub
        run: |
          if [ -f codeguru_results.json ]; then
            git config --global user.email "actions@github.com"
            git config --global user.name "GitHub Actions"
            git add codeguru_results.json
            git commit -m "Add CodeGuru analysis results"
            git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} master
          else
            echo "File codeguru_results.json does not exist."
            exit 1
          fi

      # Step 8: Upload Results as Artifact (optional)
      - name: Upload Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: codeguru-results
          path: codeguru_results.json
